/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.SwingConstants;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Ahmed
 */
public class Arithmetic extends javax.swing.JFrame {

    /**
     * Creates new form Arithmetic
     */
    static JFrame frame=new Arithmetic();
    String content, temp;
    StringBuffer FileContent;
    BufferedReader br;
    double code;
    JFileChooser chooser;
    FileNameExtensionFilter filter;
    int choice;
    File chosenFile;
    String s, extension, decompressed;
    PrintWriter out;
    Arith a=new Arith();
    public Arithmetic() {
        initComponents();
        error.setVisible(false);
    }
    private void read()
    {
            try {
                br = new BufferedReader(new InputStreamReader(new FileInputStream(chosenFile)));
                decomp.setEnabled(true);
            } catch (FileNotFoundException ex) {
                error.setText("ERROR 404! File not found");
                error.setVisible(true);
                decomp.setEnabled(false);
            }
            FileContent = new StringBuffer();
            String line;
            try {
                while ((line = br.readLine()) != null) {
                    FileContent.append(line);
                }
                Decomp.setEnabled(true);
            } catch (IOException ex) {
                error.setText("Error reading file contents");
                error.setVisible(true);
                decomp.setEnabled(false);
            }
            temp = FileContent.toString();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        file = new javax.swing.JTextField();
        compress = new javax.swing.JTextField();
        decompress = new javax.swing.JTextField();
        browse = new javax.swing.JButton();
        comp = new javax.swing.JButton();
        decomp = new javax.swing.JButton();
        back = new javax.swing.JButton();
        Decomp = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        error = new javax.swing.JLabel("",SwingConstants.CENTER);
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        jLabel1.setText("LZ78");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        jLabel2.setText("Arithmetic coding floating point");

        compress.setEditable(false);
        compress.setBackground(new java.awt.Color(255, 255, 255));
        compress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compressActionPerformed(evt);
            }
        });

        browse.setText("Browse");
        browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseActionPerformed(evt);
            }
        });

        comp.setText("Compress");
        comp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compActionPerformed(evt);
            }
        });

        decomp.setText("Decompress");
        decomp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decompActionPerformed(evt);
            }
        });

        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        Decomp.setText("Browse");
        Decomp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecompActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Rockwell", 2, 14)); // NOI18N
        jLabel3.setText("Compression result");

        error.setFont(new java.awt.Font("Rockwell", 2, 14)); // NOI18N
        error.setForeground(new java.awt.Color(255, 0, 0));
        error.setText("Error! Invalid file format");

        jLabel5.setFont(new java.awt.Font("Rockwell", 2, 14)); // NOI18N
        jLabel5.setText("Browse to select file");

        jLabel6.setFont(new java.awt.Font("Rockwell", 2, 14)); // NOI18N
        jLabel6.setText("Browse to select output file");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(file, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                            .addComponent(compress))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(browse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(decompress, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Decomp, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(decomp))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(error, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(file, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browse))
                .addGap(17, 17, 17)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(compress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(decompress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Decomp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(decomp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(back)
                    .addComponent(error, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        comp.setEnabled(false);
        decomp.setEnabled(false);
        Decomp.setEnabled(false);
        error.setVisible(false);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseActionPerformed
        compress.setText("");
        decompress.setText("");
        chooser = new JFileChooser();
        filter = new FileNameExtensionFilter(".txt", "txt");
        chooser.setFileFilter(filter);
        choice = chooser.showOpenDialog(file);
        if (choice != JFileChooser.APPROVE_OPTION) {
            return;
        }
        chosenFile = chooser.getSelectedFile();
        file.setText(chosenFile.toString());
        s = chosenFile.toString();
        extension = s.substring(s.indexOf("."));
        if (extension.equals(".txt")) {
            comp.setEnabled(true);
            decomp.setEnabled(true);
            Decomp.setEnabled(true);
            error.setVisible(false);
            try {
                br = new BufferedReader(new InputStreamReader(new FileInputStream(chosenFile)));
            } catch (FileNotFoundException ex) {
                error.setText("ERROR 404! File not found");
                comp.setEnabled(false);
                Decomp.setEnabled(false);
                 decomp.setEnabled(false);
                error.setVisible(true);
            }
            FileContent = new StringBuffer();
            String line;
            try {
                while ((line = br.readLine()) != null) {
                    FileContent.append(line);
                }
            } catch (IOException ex) {
                error.setText("Error reading file contents");
                comp.setEnabled(false);
                Decomp.setEnabled(false);
                decomp.setEnabled(false);
                error.setVisible(true);
            }
            content = FileContent.toString();
        } else {
            error.setText("Error! Invalid file format");
            error.setVisible(true);
            comp.setEnabled(false);
            Decomp.setEnabled(false);
            decomp.setEnabled(false);

        }
    }//GEN-LAST:event_browseActionPerformed

    private void compressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compressActionPerformed

    }//GEN-LAST:event_compressActionPerformed

    private void decompActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decompActionPerformed
        read(); 
        try {
                decomp.setEnabled(true);
                error.setVisible(false);
                out = new PrintWriter(new FileOutputStream(chosenFile), true);
                decompressed = a.Decompress(code);
                out.println(temp);
                out.println(decompressed);
                out.flush();
                out.close();
            } catch (FileNotFoundException ex) {
                error.setText("ERROR 404! File not found");
                error.setVisible(true);
                decomp.setEnabled(false);
            }
    }//GEN-LAST:event_decompActionPerformed

    private void compActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compActionPerformed
        code = a.compress(content);
        compress.setText(String.valueOf(code));
    }//GEN-LAST:event_compActionPerformed

    private void DecompActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecompActionPerformed
        chooser = new JFileChooser();
        filter = new FileNameExtensionFilter(".txt", "txt");
        chooser.setFileFilter(filter);
        choice = chooser.showOpenDialog(decompress);
        if (choice != JFileChooser.APPROVE_OPTION) {
            return;
        }
        chosenFile = chooser.getSelectedFile();
        decompress.setText(chosenFile.toString());
        s = chosenFile.toString();
        extension = s.substring(s.indexOf("."));
        if (extension.equals(".txt")) {
             error.setVisible(false);
            try {
                decomp.setEnabled(true);
                br = new BufferedReader(new InputStreamReader(new FileInputStream(chosenFile)));
            } catch (FileNotFoundException ex) {
                error.setText("ERROR 404! File not found");
                decomp.setEnabled(false);
                error.setVisible(true);
            }
            FileContent = new StringBuffer();
            String line;
            try {
                decomp.setEnabled(true);
                while ((line = br.readLine()) != null) {
                    FileContent.append(line);
                    if(FileContent.length()<1)
                    {
                        error.setText("Error reading file contents");
                        error.setVisible(true);
                        decomp.setEnabled(false);
                    }
                            
                }
            } catch (IOException ex) {
                
            }
            temp = FileContent.toString();
        } else {
            decomp.setEnabled(false);
            error.setText("Error! Invalid file format");
            error.setVisible(true);

        }
    }//GEN-LAST:event_DecompActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        new main().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Arithmetic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Arithmetic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Arithmetic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Arithmetic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                frame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Decomp;
    private javax.swing.JButton back;
    private javax.swing.JButton browse;
    private javax.swing.JButton comp;
    private javax.swing.JTextField compress;
    private javax.swing.JButton decomp;
    private javax.swing.JTextField decompress;
    private javax.swing.JLabel error;
    private javax.swing.JTextField file;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    // End of variables declaration//GEN-END:variables
}
